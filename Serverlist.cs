// THIS FILE IS MANUALY EDITED TO ALLOW ZERO VALUES IN THE SERVERLIST FIELDS FOR PROTBUFFER 2 COMPATIBILITY!
//
// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: serverlist.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace AlmeticaLauncher {

  /// <summary>Holder for reflection information generated from serverlist.proto</summary>
  public static partial class ServerlistReflection {

    #region Descriptor
    /// <summary>File descriptor for serverlist.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ServerlistReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBzZXJ2ZXJsaXN0LnByb3RvEg5Nb2NrVGVyYUNsaWVudCKIAgoKU2VydmVy",
            "TGlzdBIyCgdzZXJ2ZXJzGAEgAygLMiEuTW9ja1RlcmFDbGllbnQuU2VydmVy",
            "TGlzdC5TZXJ2ZXISFgoObGFzdF9wbGF5ZWRfaWQYAiABKA8SDgoGdW5rbndu",
            "GAMgASgPGp0BCgZTZXJ2ZXISCgoCaWQYASABKA8SEAoIY2F0ZWdvcnkYAiAB",
            "KAwSDwoHcmF3bmFtZRgDIAEoDBIMCgRuYW1lGAQgASgMEhEKCWNyb3dkbmVz",
            "cxgFIAEoDBIMCgRvcGVuGAYgASgMEgoKAmlwGAcgASgPEgwKBHBvcnQYCCAB",
            "KA8SDAoEbGFuZxgJIAEoDxINCgVwb3B1cBgKIAEoDGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::AlmeticaLauncher.ServerList), global::AlmeticaLauncher.ServerList.Parser, new[]{ "Servers", "LastPlayedId", "Unknwn" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::AlmeticaLauncher.ServerList.Types.Server), global::AlmeticaLauncher.ServerList.Types.Server.Parser, new[]{ "Id", "Category", "Rawname", "Name", "Crowdness", "Open", "Ip", "Port", "Lang", "Popup" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ServerList : pb::IMessage<ServerList> {
    private static readonly pb::MessageParser<ServerList> _parser = new pb::MessageParser<ServerList>(() => new ServerList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AlmeticaLauncher.ServerlistReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerList(ServerList other) : this() {
      servers_ = other.servers_.Clone();
      lastPlayedId_ = other.lastPlayedId_;
      unknwn_ = other.unknwn_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerList Clone() {
      return new ServerList(this);
    }

    /// <summary>Field number for the "servers" field.</summary>
    public const int ServersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::AlmeticaLauncher.ServerList.Types.Server> _repeated_servers_codec
        = pb::FieldCodec.ForMessage(10, global::AlmeticaLauncher.ServerList.Types.Server.Parser);
    private readonly pbc::RepeatedField<global::AlmeticaLauncher.ServerList.Types.Server> servers_ = new pbc::RepeatedField<global::AlmeticaLauncher.ServerList.Types.Server>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AlmeticaLauncher.ServerList.Types.Server> Servers {
      get { return servers_; }
    }

    /// <summary>Field number for the "last_played_id" field.</summary>
    public const int LastPlayedIdFieldNumber = 2;
    private int lastPlayedId_;
    /// <summary>
    /// 1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LastPlayedId {
      get { return lastPlayedId_; }
      set {
        lastPlayedId_ = value;
      }
    }

    /// <summary>Field number for the "unknwn" field.</summary>
    public const int UnknwnFieldNumber = 3;
    private int unknwn_;
    /// <summary>
    /// 0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Unknwn {
      get { return unknwn_; }
      set {
        unknwn_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!servers_.Equals(other.servers_)) return false;
      if (LastPlayedId != other.LastPlayedId) return false;
      if (Unknwn != other.Unknwn) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= servers_.GetHashCode();
      hash ^= LastPlayedId.GetHashCode();
      hash ^= Unknwn.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      servers_.WriteTo(output, _repeated_servers_codec);
      output.WriteRawTag(21);
      output.WriteSFixed32(LastPlayedId);
      output.WriteRawTag(29);
      output.WriteSFixed32(Unknwn);

      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += servers_.CalculateSize(_repeated_servers_codec);
      size += 1 + 4;
      size += 1 + 4;

      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerList other) {
      if (other == null) {
        return;
      }
      servers_.Add(other.servers_);
      LastPlayedId = other.LastPlayedId;
      Unknwn = other.Unknwn;
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            servers_.AddEntriesFrom(input, _repeated_servers_codec);
            break;
          }
          case 21: {
            LastPlayedId = input.ReadSFixed32();
            break;
          }
          case 29: {
            Unknwn = input.ReadSFixed32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ServerList message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Server : pb::IMessage<Server> {
        private static readonly pb::MessageParser<Server> _parser = new pb::MessageParser<Server>(() => new Server());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Server> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::AlmeticaLauncher.ServerList.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Server() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Server(Server other) : this() {
          id_ = other.id_;
          category_ = other.category_;
          rawname_ = other.rawname_;
          name_ = other.name_;
          crowdness_ = other.crowdness_;
          open_ = other.open_;
          ip_ = other.ip_;
          port_ = other.port_;
          lang_ = other.lang_;
          popup_ = other.popup_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Server Clone() {
          return new Server(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private int id_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Id {
          get { return id_; }
          set {
            id_ = value;
          }
        }

        /// <summary>Field number for the "category" field.</summary>
        public const int CategoryFieldNumber = 2;
        private pb::ByteString category_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Category {
          get { return category_; }
          set {
            category_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "rawname" field.</summary>
        public const int RawnameFieldNumber = 3;
        private pb::ByteString rawname_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Rawname {
          get { return rawname_; }
          set {
            rawname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 4;
        private pb::ByteString name_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "crowdness" field.</summary>
        public const int CrowdnessFieldNumber = 5;
        private pb::ByteString crowdness_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Crowdness {
          get { return crowdness_; }
          set {
            crowdness_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "open" field.</summary>
        public const int OpenFieldNumber = 6;
        private pb::ByteString open_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Open {
          get { return open_; }
          set {
            open_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "ip" field.</summary>
        public const int IpFieldNumber = 7;
        private int ip_;
        /// <summary>
        /// IPV4 address encoded as int32
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Ip {
          get { return ip_; }
          set {
            ip_ = value;
          }
        }

        /// <summary>Field number for the "port" field.</summary>
        public const int PortFieldNumber = 8;
        private int port_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Port {
          get { return port_; }
          set {
            port_ = value;
          }
        }

        /// <summary>Field number for the "lang" field.</summary>
        public const int LangFieldNumber = 9;
        private int lang_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Lang {
          get { return lang_; }
          set {
            lang_ = value;
          }
        }

        /// <summary>Field number for the "popup" field.</summary>
        public const int PopupFieldNumber = 10;
        private pb::ByteString popup_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Popup {
          get { return popup_; }
          set {
            popup_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Server);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Server other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if (Category != other.Category) return false;
          if (Rawname != other.Rawname) return false;
          if (Name != other.Name) return false;
          if (Crowdness != other.Crowdness) return false;
          if (Open != other.Open) return false;
          if (Ip != other.Ip) return false;
          if (Port != other.Port) return false;
          if (Lang != other.Lang) return false;
          if (Popup != other.Popup) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Id != 0) hash ^= Id.GetHashCode();
          if (Category.Length != 0) hash ^= Category.GetHashCode();
          if (Rawname.Length != 0) hash ^= Rawname.GetHashCode();
          if (Name.Length != 0) hash ^= Name.GetHashCode();
          if (Crowdness.Length != 0) hash ^= Crowdness.GetHashCode();
          if (Open.Length != 0) hash ^= Open.GetHashCode();
          if (Ip != 0) hash ^= Ip.GetHashCode();
          if (Port != 0) hash ^= Port.GetHashCode();
          if (Lang != 0) hash ^= Lang.GetHashCode();
          if (Popup.Length != 0) hash ^= Popup.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Id != 0) {
            output.WriteRawTag(13);
            output.WriteSFixed32(Id);
          }
          if (Category.Length != 0) {
            output.WriteRawTag(18);
            output.WriteBytes(Category);
          }
          if (Rawname.Length != 0) {
            output.WriteRawTag(26);
            output.WriteBytes(Rawname);
          }
          if (Name.Length != 0) {
            output.WriteRawTag(34);
            output.WriteBytes(Name);
          }
          if (Crowdness.Length != 0) {
            output.WriteRawTag(42);
            output.WriteBytes(Crowdness);
          }
          if (Open.Length != 0) {
            output.WriteRawTag(50);
            output.WriteBytes(Open);
          }
          if (Ip != 0) {
            output.WriteRawTag(61);
            output.WriteSFixed32(Ip);
          }
          if (Port != 0) {
            output.WriteRawTag(69);
            output.WriteSFixed32(Port);
          }
          if (Lang != 0) {
            output.WriteRawTag(77);
            output.WriteSFixed32(Lang);
          }
          if (Popup.Length != 0) {
            output.WriteRawTag(82);
            output.WriteBytes(Popup);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id != 0) {
            size += 1 + 4;
          }
          if (Category.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Category);
          }
          if (Rawname.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Rawname);
          }
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
          }
          if (Crowdness.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Crowdness);
          }
          if (Open.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Open);
          }
          if (Ip != 0) {
            size += 1 + 4;
          }
          if (Port != 0) {
            size += 1 + 4;
          }
          if (Lang != 0) {
            size += 1 + 4;
          }
          if (Popup.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Popup);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Server other) {
          if (other == null) {
            return;
          }
          if (other.Id != 0) {
            Id = other.Id;
          }
          if (other.Category.Length != 0) {
            Category = other.Category;
          }
          if (other.Rawname.Length != 0) {
            Rawname = other.Rawname;
          }
          if (other.Name.Length != 0) {
            Name = other.Name;
          }
          if (other.Crowdness.Length != 0) {
            Crowdness = other.Crowdness;
          }
          if (other.Open.Length != 0) {
            Open = other.Open;
          }
          if (other.Ip != 0) {
            Ip = other.Ip;
          }
          if (other.Port != 0) {
            Port = other.Port;
          }
          if (other.Lang != 0) {
            Lang = other.Lang;
          }
          if (other.Popup.Length != 0) {
            Popup = other.Popup;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 13: {
                Id = input.ReadSFixed32();
                break;
              }
              case 18: {
                Category = input.ReadBytes();
                break;
              }
              case 26: {
                Rawname = input.ReadBytes();
                break;
              }
              case 34: {
                Name = input.ReadBytes();
                break;
              }
              case 42: {
                Crowdness = input.ReadBytes();
                break;
              }
              case 50: {
                Open = input.ReadBytes();
                break;
              }
              case 61: {
                Ip = input.ReadSFixed32();
                break;
              }
              case 69: {
                Port = input.ReadSFixed32();
                break;
              }
              case 77: {
                Lang = input.ReadSFixed32();
                break;
              }
              case 82: {
                Popup = input.ReadBytes();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
